{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAqBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA5BPQ,SAASC,iBAAiB,oBAAoB,WAC/BD,SAASE,cAAc,SAE/BD,iBAAiB,UAAU,SAASE,GACvCA,EAAMC,iBAEN,IAAMC,EAAaL,SAASE,cAAc,uBACpCI,EAAYN,SAASE,cAAc,sBACnCK,EAAcP,SAASE,cAAc,wBAErCM,EAAaC,SAASJ,EAAWK,MAAO,IACxCC,EAAOF,SAASH,EAAUI,MAAO,KAqB3C,SAAwBE,EAAQJ,EAAYG,GAG1C,IAFA,IAAME,EAAW,GAERC,EAAI,EAAGA,GAAKF,EAAQE,IAAK,CAChC,IAEMC,EAAUzB,EAAcwB,EAFTN,GAAcM,EAAI,GAAKH,GAGzCK,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjB0B,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAEvE8B,OAAM,SAAAL,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClB0B,EAAA9B,GAAS+B,OAAOI,QAAQ,sBAAqCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAGvEqB,EAASW,KAAKT,E,EAhCdU,CAFehB,SAASF,EAAYG,MAAO,IAEpBF,EAAYG,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const form = document.querySelector('.form');\n\n  form.addEventListener('submit', function(event) {\n    event.preventDefault();\n\n    const delayInput = document.querySelector('input[name=\"delay\"]');\n    const stepInput = document.querySelector('input[name=\"step\"]');\n    const amountInput = document.querySelector('input[name=\"amount\"]');\n\n    const firstDelay = parseInt(delayInput.value, 10);\n    const step = parseInt(stepInput.value, 10);\n    const amount = parseInt(amountInput.value, 10);\n\n    createPromises(amount, firstDelay, step);\n  });\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction createPromises(amount, firstDelay, step) {\n  const promises = [];\n\n  for (let i = 1; i <= amount; i++) {\n    const currentDelay = firstDelay + (i - 1) * step;\n\n    const promise = createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    promises.push(promise);\n  }\n\n}\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","addEventListener","querySelector","event","preventDefault","delayInput","stepInput","amountInput","firstDelay","parseInt","value","step","amount","promises","i","promise","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","push","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.5199555f.js.map"}